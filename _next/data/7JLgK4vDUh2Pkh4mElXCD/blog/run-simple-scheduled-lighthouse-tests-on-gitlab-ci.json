{"pageProps":{"post":{"title":"Run simple scheduled Lighthouse tests on GitLab CI","date":"2019-02-12T00:00:00.000Z","description":"Step-by-step tutorial on setting up scheduled Lighthouse performance tests using GitLab CI to monitor and improve website performance.","slug":"run-simple-scheduled-lighthouse-tests-on-gitlab-ci","content":"\n## Why?\n\nIt's good to monitor your site performance on regular basis. New content like images, tracking pixels and server issues can be problems that affect your site's performance. Lighthouse is a tool which can point out these issues to you.\n\n## What is Lighthouse?\n\n_Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps, and more._\n–[Lighthouse Website](https://developers.google.com/web/tools/lighthouse/)\n\n## Getting started\n\nIn this tutorial I'll teach you how to run a simple scheduled Lighthouse performance test on your site using GitLab's free CI service.\n\n### What is GitLab?\n\n_GitLab is a single application for the entire software development lifecycle. From project planning and source code management to CI/CD, monitoring, and security._\n–[GitLab About page](https://about.gitlab.com/)\n\nGitLab is considered alternative to GitHub.\n\n### 1. Set up GitLab\n\nRegister [here](https://gitlab.com/users/sign_in).\n\n### 2. Create new repository\n\n#### Begin by creating new project pressing the `New Project` button on your GitLab root page\n\n![Create new GitLab project](/create-new-gitlab-project.png)\n\n#### Give your project a name\n\n![GitLab project name](/gitlab-project-name.png)\nFor example name your project like this: `lighthouse-{your site}`.\n\nFinnish creating your project by pressing the `Create project` button. Pressing the button takes you to the next step.\n\n### 3. Create `.gitlab-ci.yml` file\n\n#### To add script where all the magic happens and click the `New file` button\n\n![Fresh GitLab project page](/fresh-gitlab-project-page.png)\n\n#### The file\n\n![GitLab CI config](/gitlab-ci-config.png)\n\n#### Copy the content of the file below and copy it into GitLab's file editor\n\nRemember to replace `{TEST Url}` with the URL of the page you wished to be tested.\n\n```yml\nimage: markhobson/node-chrome\n\nrun_lighthouse:\n  variables:\n    LIGHTHOUSE_TEST_URL: { TEST Url }\n  stage: deploy\n  environment: Production\n  only:\n    - master\n  before_script:\n    # Install Lighthouse\n    - npm i -g lighthouse\n  script:\n    # Run Lighthouse test\n    - lighthouse --chrome-flags=\"--headless --no-sandbox\" $LIGHTHOUSE_TEST_URL --output html --output-path ./report.html\n  artifacts:\n    paths:\n      - ./report.html\n    expire_in: 1 week\n```\n\nClick `Commit changes` to finish creating the file.\n\n### 4. Test your job\n\nAfter committing the changes the test should start right away.\n\n#### Go to `CI / CD -> Jobs` on the sidebar to see your test running.\n\n![GitLab CI jobs list](/gitlab-ci-jobs-list.png)\n\n### 5. Schedule tests\n\n#### To Schedule tests go to `CI / CD -> Schedules` and press `Create schedule` button\n\n![GitLab CI create new schedule](/gitlab-ci-create-new-schedule.png)\n\n#### Set up schedule\n\nGive your test a name and a schedule using Cron. More about Cron [here](https://en.wikipedia.org/wiki/Cron).\n![GitLab CI schedule a new pipeline](/gitlab-ci-schedule-a-new-pipeline.png)\nPress `Save pipeline schedule` to finish your schedule.\n\n#### Schedule is ready\n\n![GitLab CI active pipeline schedule](/gitlab-ci-active-pipeline-schedule.png)\n\n### 6. Review your results\n\n#### All your tests appear at `CI / CD -> Jobs`\n\n![GitLab CI passed pipeline](/gitlab-ci-passed-pipeline.png)\nTo download and view your Lighthouse reports click the cloud icon on the right.\n","htmlContent":"<h2>Why?</h2>\n<p>It&#39;s good to monitor your site performance on regular basis. New content like images, tracking pixels and server issues can be problems that affect your site&#39;s performance. Lighthouse is a tool which can point out these issues to you.</p>\n<h2>What is Lighthouse?</h2>\n<p><em>Lighthouse is an open-source, automated tool for improving the quality of web pages. You can run it against any web page, public or requiring authentication. It has audits for performance, accessibility, progressive web apps, and more.</em>\n–<a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse Website</a></p>\n<h2>Getting started</h2>\n<p>In this tutorial I&#39;ll teach you how to run a simple scheduled Lighthouse performance test on your site using GitLab&#39;s free CI service.</p>\n<h3>What is GitLab?</h3>\n<p><em>GitLab is a single application for the entire software development lifecycle. From project planning and source code management to CI/CD, monitoring, and security.</em>\n–<a href=\"https://about.gitlab.com/\">GitLab About page</a></p>\n<p>GitLab is considered alternative to GitHub.</p>\n<h3>1. Set up GitLab</h3>\n<p>Register <a href=\"https://gitlab.com/users/sign_in\">here</a>.</p>\n<h3>2. Create new repository</h3>\n<h4>Begin by creating new project pressing the <code>New Project</code> button on your GitLab root page</h4>\n<p><img src=\"/create-new-gitlab-project.png\" alt=\"Create new GitLab project\"></p>\n<h4>Give your project a name</h4>\n<p><img src=\"/gitlab-project-name.png\" alt=\"GitLab project name\">\nFor example name your project like this: <code>lighthouse-{your site}</code>.</p>\n<p>Finnish creating your project by pressing the <code>Create project</code> button. Pressing the button takes you to the next step.</p>\n<h3>3. Create <code>.gitlab-ci.yml</code> file</h3>\n<h4>To add script where all the magic happens and click the <code>New file</code> button</h4>\n<p><img src=\"/fresh-gitlab-project-page.png\" alt=\"Fresh GitLab project page\"></p>\n<h4>The file</h4>\n<p><img src=\"/gitlab-ci-config.png\" alt=\"GitLab CI config\"></p>\n<h4>Copy the content of the file below and copy it into GitLab&#39;s file editor</h4>\n<p>Remember to replace <code>{TEST Url}</code> with the URL of the page you wished to be tested.</p>\n<pre><code class=\"language-yml\"><span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">markhobson/node-chrome</span>\n\n<span class=\"hljs-attr\">run_lighthouse:</span>\n  <span class=\"hljs-attr\">variables:</span>\n    <span class=\"hljs-attr\">LIGHTHOUSE_TEST_URL:</span> { <span class=\"hljs-string\">TEST</span> <span class=\"hljs-string\">Url</span> }\n  <span class=\"hljs-attr\">stage:</span> <span class=\"hljs-string\">deploy</span>\n  <span class=\"hljs-attr\">environment:</span> <span class=\"hljs-string\">Production</span>\n  <span class=\"hljs-attr\">only:</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">master</span>\n  <span class=\"hljs-attr\">before_script:</span>\n    <span class=\"hljs-comment\"># Install Lighthouse</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">npm</span> <span class=\"hljs-string\">i</span> <span class=\"hljs-string\">-g</span> <span class=\"hljs-string\">lighthouse</span>\n  <span class=\"hljs-attr\">script:</span>\n    <span class=\"hljs-comment\"># Run Lighthouse test</span>\n    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">lighthouse</span> <span class=\"hljs-string\">--chrome-flags=&quot;--headless</span> <span class=\"hljs-string\">--no-sandbox&quot;</span> <span class=\"hljs-string\">$LIGHTHOUSE_TEST_URL</span> <span class=\"hljs-string\">--output</span> <span class=\"hljs-string\">html</span> <span class=\"hljs-string\">--output-path</span> <span class=\"hljs-string\">./report.html</span>\n  <span class=\"hljs-attr\">artifacts:</span>\n    <span class=\"hljs-attr\">paths:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./report.html</span>\n    <span class=\"hljs-attr\">expire_in:</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-string\">week</span>\n</code></pre><p>Click <code>Commit changes</code> to finish creating the file.</p>\n<h3>4. Test your job</h3>\n<p>After committing the changes the test should start right away.</p>\n<h4>Go to <code>CI / CD -&gt; Jobs</code> on the sidebar to see your test running.</h4>\n<p><img src=\"/gitlab-ci-jobs-list.png\" alt=\"GitLab CI jobs list\"></p>\n<h3>5. Schedule tests</h3>\n<h4>To Schedule tests go to <code>CI / CD -&gt; Schedules</code> and press <code>Create schedule</code> button</h4>\n<p><img src=\"/gitlab-ci-create-new-schedule.png\" alt=\"GitLab CI create new schedule\"></p>\n<h4>Set up schedule</h4>\n<p>Give your test a name and a schedule using Cron. More about Cron <a href=\"https://en.wikipedia.org/wiki/Cron\">here</a>.\n<img src=\"/gitlab-ci-schedule-a-new-pipeline.png\" alt=\"GitLab CI schedule a new pipeline\">\nPress <code>Save pipeline schedule</code> to finish your schedule.</p>\n<h4>Schedule is ready</h4>\n<p><img src=\"/gitlab-ci-active-pipeline-schedule.png\" alt=\"GitLab CI active pipeline schedule\"></p>\n<h3>6. Review your results</h3>\n<h4>All your tests appear at <code>CI / CD -&gt; Jobs</code></h4>\n<p><img src=\"/gitlab-ci-passed-pipeline.png\" alt=\"GitLab CI passed pipeline\">\nTo download and view your Lighthouse reports click the cloud icon on the right.</p>\n"}},"__N_SSG":true}