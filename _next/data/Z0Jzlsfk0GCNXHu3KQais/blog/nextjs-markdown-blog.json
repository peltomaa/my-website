{"pageProps":{"post":{"title":"Next.js Markdown blog","date":"2018-11-13T00:00:00.000Z","description":"Tutorial on building a Markdown-powered blog with Next.js, including setup, Markdown parsing, and dynamic routing for blog posts.","slug":"nextjs-markdown-blog","content":"\nNext.js is a great [React](https://reactjs.org/) framework. It's easy to use and lightweight. I use it on my personal [website (toukopeltomaa.com)](https://toukopeltomaa.com/).\n\nIn this post I'm going to show how to make a simple blog using [Markdown](https://en.wikipedia.org/wiki/Markdown) and [Next.js](https://nextjs.org/).\n\n### 1. Create folder for all Markdown files\n\nCreate a folder named posts root of your project. Create all of your posts as Markdown there\n\n#### Example Markdown file in posts/example-post.md\n\n```markdown\n---\ntitle: Example post\ndate: 13-11-2018\nwrittenBy: Touko Peltomaa\n---\n\n## Example post\n```\n\n### 2. Add Webpack plugin raw-loader to next.config.js\n\nWe need [raw-loader](https://github.com/webpack-contrib/raw-loader) to load Markdown files\n\n```bash\nnpm i -D raw-loader\n```\n\n#### next.config.js file\n\nCreate next.config.js to your project's root folder if you haven't already\n\n```js\nmodule.exports = {\n  webpack: (config) => {\n    config.module.rules.push({\n      test: /\\.md$/,\n      use: \"raw-loader\",\n    });\n\n    return config;\n  },\n};\n```\n\n### 3. Create home page at pages/index.js\n\n#### Parse posts\n\nWe are going to parse posts with [gray-matter](https://github.com/jonschlinkert/gray-matter) library\n\ngray-matter library will parse the [YAML](https://en.wikipedia.org/wiki/YAML) metadata. We can use the YAML data for SEO, written by and post dates.\n\n```bash\nnpm i -S gray-matter\n```\n\n#### Gets posts from posts/\\* folder\n\n```jsx\nimport React from \"react\";\nimport matter from \"gray-matter\";\nimport Link from \"next/link\";\n\nexport default class extends React.Component {\n  static async getInitialProps() {\n    // Get posts from folder\n    const posts = ((ctx) => {\n      const keys = ctx.keys();\n      const values = keys.map(ctx);\n\n      const data = keys.map((key, index) => {\n        // Create slug from filename\n        const slug = key\n          .replace(/^.*[\\\\\\/]/, \"\")\n          .split(\".\")\n          .slice(0, -1)\n          .join(\".\");\n        const value = values[index];\n\n        // Parse document\n        const document = matter(value);\n\n        return {\n          document,\n          slug,\n        };\n      });\n\n      return data;\n    })(require.context(\"../posts\", true, /\\.md$/));\n\n    return {\n      posts,\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <h1>Posts</h1>\n        {this.props.posts.map(({ document: { data }, slug }) => (\n          <Link href={{ pathname: \"/post\", query: { id: slug } }} key={slug}>\n            <h2>{data.title}</h2>\n          </Link>\n        ))}\n      </>\n    );\n  }\n}\n```\n\nThe `getInitialProps` function gets posts from posts folder and returns them in a usable format. _We are going to use your filename as our post's slug or id_\n\n### 3. Create post page at pages/post.js\n\nGet document name from querystring, require it and parse it.\n\n#### Install React Markdown\n\nTo render Markdown we are going to use [react-markdown](https://github.com/rexxars/react-markdown)\n\n```bash\nnpm i -S react-markdown\n```\n\n```jsx\nimport React from \"react\";\nimport matter from \"gray-matter\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport default class extends React.Component {\n  static async getInitialProps({ query }) {\n    const post = await import(`../posts/${query.id}.md`);\n    const document = matter(post.default);\n\n    return {\n      ...document,\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <h1>{this.props.data.title}</h1>\n        <i>{`Written by ${this.props.data.writtenBy} | ${this.props.data.date}`}</i>\n        <ReactMarkdown source={this.props.content} />\n      </>\n    );\n  }\n}\n```\n","htmlContent":"<p>Next.js is a great <a href=\"https://reactjs.org/\">React</a> framework. It&#39;s easy to use and lightweight. I use it on my personal <a href=\"https://toukopeltomaa.com/\">website (toukopeltomaa.com)</a>.</p>\n<p>In this post I&#39;m going to show how to make a simple blog using <a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a> and <a href=\"https://nextjs.org/\">Next.js</a>.</p>\n<h3>1. Create folder for all Markdown files</h3>\n<p>Create a folder named posts root of your project. Create all of your posts as Markdown there</p>\n<h4>Example Markdown file in posts/example-post.md</h4>\n<pre><code class=\"language-markdown\">---\ntitle: Example post\ndate: 13-11-2018\n<span class=\"hljs-section\">writtenBy: Touko Peltomaa\n---</span>\n\n<span class=\"hljs-section\">## Example post</span>\n</code></pre><h3>2. Add Webpack plugin raw-loader to next.config.js</h3>\n<p>We need <a href=\"https://github.com/webpack-contrib/raw-loader\">raw-loader</a> to load Markdown files</p>\n<pre><code class=\"language-bash\">npm i -D raw-loader\n</code></pre><h4>next.config.js file</h4>\n<p>Create next.config.js to your project&#39;s root folder if you haven&#39;t already</p>\n<pre><code class=\"language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">webpack</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">config</span>) =&gt;</span> {\n    config.<span class=\"hljs-property\">module</span>.<span class=\"hljs-property\">rules</span>.<span class=\"hljs-title function_\">push</span>({\n      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.md$/</span>,\n      <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">&quot;raw-loader&quot;</span>,\n    });\n\n    <span class=\"hljs-keyword\">return</span> config;\n  },\n};\n</code></pre><h3>3. Create home page at pages/index.js</h3>\n<h4>Parse posts</h4>\n<p>We are going to parse posts with <a href=\"https://github.com/jonschlinkert/gray-matter\">gray-matter</a> library</p>\n<p>gray-matter library will parse the <a href=\"https://en.wikipedia.org/wiki/YAML\">YAML</a> metadata. We can use the YAML data for SEO, written by and post dates.</p>\n<pre><code class=\"language-bash\">npm i -S gray-matter\n</code></pre><h4>Gets posts from posts/* folder</h4>\n<pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;gray-matter&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Link</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;next/link&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">extends</span> <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Component</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getInitialProps</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// Get posts from folder</span>\n    <span class=\"hljs-keyword\">const</span> posts = (<span class=\"hljs-function\">(<span class=\"hljs-params\">ctx</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> keys = ctx.<span class=\"hljs-title function_\">keys</span>();\n      <span class=\"hljs-keyword\">const</span> values = keys.<span class=\"hljs-title function_\">map</span>(ctx);\n\n      <span class=\"hljs-keyword\">const</span> data = keys.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">key, index</span>) =&gt;</span> {\n        <span class=\"hljs-comment\">// Create slug from filename</span>\n        <span class=\"hljs-keyword\">const</span> slug = key\n          .<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/^.*[\\\\\\/]/</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n          .<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;.&quot;</span>)\n          .<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>)\n          .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);\n        <span class=\"hljs-keyword\">const</span> value = values[index];\n\n        <span class=\"hljs-comment\">// Parse document</span>\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title function_\">matter</span>(value);\n\n        <span class=\"hljs-keyword\">return</span> {\n          <span class=\"hljs-variable language_\">document</span>,\n          slug,\n        };\n      });\n\n      <span class=\"hljs-keyword\">return</span> data;\n    })(<span class=\"hljs-built_in\">require</span>.<span class=\"hljs-title function_\">context</span>(<span class=\"hljs-string\">&quot;../posts&quot;</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-regexp\">/\\.md$/</span>));\n\n    <span class=\"hljs-keyword\">return</span> {\n      posts,\n    };\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Posts<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n        {this.props.posts.map(({ document: { data }, slug }) =&gt; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">pathname:</span> &quot;/<span class=\"hljs-attr\">post</span>&quot;, <span class=\"hljs-attr\">query:</span> { <span class=\"hljs-attr\">id:</span> <span class=\"hljs-attr\">slug</span> } }} <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{slug}</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>{data.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>\n        ))}\n      <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n  }\n}\n</code></pre><p>The <code>getInitialProps</code> function gets posts from posts folder and returns them in a usable format. <em>We are going to use your filename as our post&#39;s slug or id</em></p>\n<h3>3. Create post page at pages/post.js</h3>\n<p>Get document name from querystring, require it and parse it.</p>\n<h4>Install React Markdown</h4>\n<p>To render Markdown we are going to use <a href=\"https://github.com/rexxars/react-markdown\">react-markdown</a></p>\n<pre><code class=\"language-bash\">npm i -S react-markdown\n</code></pre><pre><code class=\"language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> matter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;gray-matter&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactMarkdown</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-markdown&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">extends</span> <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-property\">Component</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getInitialProps</span>(<span class=\"hljs-params\">{ query }</span>) {\n    <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">`../posts/<span class=\"hljs-subst\">${query.id}</span>.md`</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable language_\">document</span> = <span class=\"hljs-title function_\">matter</span>(post.<span class=\"hljs-property\">default</span>);\n\n    <span class=\"hljs-keyword\">return</span> {\n      ...<span class=\"hljs-variable language_\">document</span>,\n    };\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>{this.props.data.title}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">i</span>&gt;</span>{`Written by ${this.props.data.writtenBy} | ${this.props.data.date}`}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">i</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ReactMarkdown</span> <span class=\"hljs-attr\">source</span>=<span class=\"hljs-string\">{this.props.content}</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    );\n  }\n}\n</code></pre>"}},"__N_SSG":true}