{"pageProps":{"post":{"title":"React Native + React Navigation e2e testing with Cavy","date":"2020-04-13T00:00:00.000Z","description":"Guide to implementing end-to-end testing in React Native apps using Cavy with React Navigation, including navigation testing patterns and best practices.","slug":"react-native-react-navigation-e2e-testing-with-cavy","content":"\n\n[Cavy](https://cavy.app/) is a awesome React Native e2e testing library. \nIt's easy to create tests, but usage React Navigation is undocumented. \n\nHere is a technique to control React Navigation 5 navigator in tests.\n\n```tsx\n// App.ts\nimport { NavigationContainer } from '@react-navigation/native';\nimport { useCavy } from 'cavy';\n\nexport default function App() {\n  const generateTestHook = useCavy();\n  return (\n    <NavigationContainer ref={generateTestHook('Navigation')}>{/* ... */}</NavigationContainer>\n  );\n}\n```\n\nAnd create navigateBack helper:\n\n```tsx\n// helper.ts\nexport async function navigateBack(navigation: any) {\n    navigation.goBack();\n}\n```\n\nCall helper from your tests:\n\n```tsx\n// navgationSpec.ts\nimport { TestScope } from 'cavy';\nimport { navigateBack } from './helpers';\n\nexport default function(spec: TestScope) {\n  spec.describe('Test', function() {\n\n    spec.it('works', async function() {\n      const navigationComponent = await spec.findComponent('Navigation');\n      await navigateBack(navigationComponent)\n    });\n  });\n}\n```\n\n","htmlContent":"<p><a href=\"https://cavy.app/\">Cavy</a> is a awesome React Native e2e testing library. \nIt&#39;s easy to create tests, but usage React Navigation is undocumented. </p>\n<p>Here is a technique to control React Navigation 5 navigator in tests.</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-comment\">// App.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NavigationContainer</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@react-navigation/native&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useCavy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;cavy&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">App</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> generateTestHook = <span class=\"hljs-title function_\">useCavy</span>();\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NavigationContainer</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{generateTestHook(</span>&#x27;<span class=\"hljs-attr\">Navigation</span>&#x27;)}&gt;</span>{/* ... */}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NavigationContainer</span>&gt;</span></span>\n  );\n}\n</code></pre><p>And create navigateBack helper:</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-comment\">// helper.ts</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">navigateBack</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">navigation</span>: <span class=\"hljs-built_in\">any</span></span>) {\n    navigation.<span class=\"hljs-title function_\">goBack</span>();\n}\n</code></pre><p>Call helper from your tests:</p>\n<pre><code class=\"language-tsx\"><span class=\"hljs-comment\">// navgationSpec.ts</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">TestScope</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;cavy&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { navigateBack } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./helpers&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-attr\">spec</span>: <span class=\"hljs-title class_\">TestScope</span></span>) {\n  spec.<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;Test&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n\n    spec.<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;works&#x27;</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">const</span> navigationComponent = <span class=\"hljs-keyword\">await</span> spec.<span class=\"hljs-title function_\">findComponent</span>(<span class=\"hljs-string\">&#x27;Navigation&#x27;</span>);\n      <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">navigateBack</span>(navigationComponent)\n    });\n  });\n}\n</code></pre>"},"canonicalUrl":"https://toukopeltomaa.com/blog/react-native-react-navigation-e2e-testing-with-cavy"},"__N_SSG":true}